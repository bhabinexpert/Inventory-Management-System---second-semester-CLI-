from datetime import datetime

def generate_invoice(customer_name, purchased_products, invoice_filename):
    """
    Generates and saves a purchase invoice for the customer.

    The function creates an invoice with the shop's name, timestamp, customer name,
    and details of purchased products (name, quantity, bonus, vendor, total cost, VAT).
    The invoice is saved to a file and displayed on the console. Costs and VAT are formatted as floats
    with two decimal places. Includes total amount, total VAT, and total amount including VAT.

    Arguments:
        customer_name (str): The name of the customer making the purchase.
        purchased_products (list): List of dictionaries containing product details
                                  (product_name, quantity, bonus, total_cost, vat, vendor_name).
        invoice_filename (str): The name of the file to save the invoice.

    Returns:
        str: The timestamp used in the invoice.
    """
    # Get current timestamp
    c_time = datetime.now()
    timestamp = f"{c_time.year}:{c_time.month}:{c_time.day}:{c_time.hour}:{c_time.minute}:{c_time.second}"
       
    # Shop's name
    shop_name = "WE CARE SKIN PRODUCTS"

    # Create invoice content
    invoice_content = shop_name + "\n"
    invoice_content += f"Timestamp: {timestamp}\n"
    invoice_content += f"Customer Name: {customer_name}\n"
    invoice_content += "=" * 30 + "\n"
    
    total_amount = 0.0
    total_vat = 0.0

    for product in purchased_products:
        product_name = product["product_name"]
        quantity = product["quantity"]
        bonus = product["bonus"]
        total_cost = product["total_cost"]
        vat = product["vat"]
        vendor_name = product["vendor_name"]

        invoice_content += f"Product: {product_name}\n"
        invoice_content += f"Quantity: {quantity} | Bonus: {bonus}\n"
        invoice_content += f"Vendor Name: {vendor_name}\n"
        invoice_content += f"Total Cost: RS: {total_cost:.2f}\n"
        invoice_content += f"VAT (13%): RS: {vat:.2f}\n"
        invoice_content += "=" * 30 + "\n"

        total_amount += total_cost
        total_vat += vat
        

    invoice_content += f"Total Amount: Rs: {total_amount:.2f}\n"
    invoice_content += f"Total VAT: Rs: {total_vat:.2f}\n"
    invoice_content += f"Total Amount Including VAT: Rs: {(total_amount + total_vat):.2f}\n"
    invoice_content += "=" * 35 + "\n"
    

    # Save the invoice to the specified file
    with open(invoice_filename, "w") as invoice_file:
        invoice_file.write(invoice_content)
    print("Purchase invoice saved to: " + invoice_filename)

    return timestamp

def generate_restock_invoice(restocked_products, invoice_filename):
    """
    Generates and saves a restock invoice for the admin.

    The function creates an invoice with the shop's name, timestamp,
    and details of restocked products (name, quantity, vendor, total cost, VAT).
    The invoice is saved to a file and displayed on the console. Costs and VAT are formatted as floats
    with two decimal places. The format matches the purchase invoice generated by generate_invoice,
    except that the bonus field is not included. Includes total amount, total VAT, and total amount including VAT.

    Arguments:
        admin_name (str): The name of the admin performing the restock.
        restocked_products (list): List of dictionaries containing product details
                                  (product_name, quantity, bonus, total_cost, vat, vendor_name).
        invoice_filename (str): The name of the file to save the invoice.

    Returns:
        None
    """
    # Get current timestamp
    c_time = datetime.now()
    timestamp = f"{c_time.year}:{c_time.month}:{c_time.day}:{c_time.hour}:{c_time.minute}:{c_time.second}"
    print("Timestamp generated for restock invoice: " + timestamp)
    
    # Shop's name
    shop_name = "WE CARE SKIN PRODUCTS"

    # Create invoice content
    invoice_content = shop_name + "\n"
    invoice_content += f"Timestamp: {timestamp}\n"
    invoice_content += "=" * 35 + "\n"
    
    total_amount = 0.0
    total_vat = 0.0

    for product in restocked_products:
        product_name = product["product_name"]
        quantity = product["quantity"]
        total_cost = product["total_cost"]
        vat = product["vat"]
        vendor_name = product["vendor_name"]

        invoice_content += f"Product: {product_name}\n"
        invoice_content += f"Quantity: {quantity}\n"
        invoice_content += f"Vendor Name: {vendor_name}\n"
        invoice_content += f"Total Cost: RS: {total_cost:.2f}\n"
        invoice_content += f"VAT (13%): RS: {vat:.2f}\n"
        invoice_content += "=" * 30 + "\n"

        total_amount += total_cost
        total_vat += vat
        print(f"Added product to restock invoice: {product_name}, Total Cost: RS: {total_cost:.2f}, VAT: RS: {vat:.2f}")

    invoice_content += f"Total Amount: Rs: {total_amount:.2f}\n"
    invoice_content += f"Total VAT: Rs: {total_vat:.2f}\n"
    invoice_content += f"Total Amount Including VAT: Rs: {(total_amount + total_vat):.2f}\n"
    invoice_content += "=" * 30 + "\n"
    print(f"Total amount calculated for restock invoice: Rs: {total_amount:.2f}")
    print(f"Total VAT calculated for restock invoice: Rs: {total_vat:.2f}")
    print(f"Total Amount Including VAT: Rs: {(total_amount + total_vat):.2f}")

    # Save the invoice to the specified file
    try:
        with open(invoice_filename, "w") as file:
            file.write(invoice_content)
        print("Restock invoice saved to: " + invoice_filename)
    except Exception as e:
        print("Error saving restock invoice: " + str(e))
        return

    # Display restock invoice to the admin
    print("\nRestock Invoice Generated...")
    print(invoice_content)

def update_product_stock(newlist):
    """
    Updates the product stock in info.txt.

    The function writes the updated product list to info.txt, overwriting the existing file.
    It ensures all changes from restocking or purchasing are saved. Costs are stored as floats with two decimal places.
    If an error occurs, it prints an error message and returns.

    Arguments:
        newlist (list): List of lists, where each inner list contains product details
                        (name, vendor, quantity, cost, country).

    Returns:
        None
    """
    try:
        with open("info.txt", "w") as file:
            for item in newlist:
                item[3] = f"{float(item[3]):.2f}"
                file.write(", ".join(item) + "\n")
        print("\nProduct stock updated successfully in info.txt! \n")
    except Exception as e:
        print("Error updating info.txt: " + str(e))
        return
